-- Level (fresher, junior, senior, master, ... ): l√† 1 trong c√°c gi√° tr·ªã ƒë∆∞·ª£c c·∫•u h√¨nh trong DB
Create table rank(
             id  NUMBER(4) primary key NOT NULL,
             code nvarchar2(50) NOT NULL,
             description nvarchar2(50),
             is_delete INTEGER NOT NULL
);

-- status_job (Tr·∫°ng th√°i job: ch·ª? x√©t duy·ªát, ƒë√£ t·ª´ ch·ªëi, ƒëang tuy·ªÉn..)
Create table status_job(
            id NUMBER(4) primary key,
            code nvarchar2(50),
            description nvarchar2(50),
            is_delete INTEGER NOT NULL
);
-- tr·∫°ng th√°i(ƒëang ph·ª?ng v·∫•n, ƒë√£ tuy·ªÉn)
Create table status_job_register(
            id NUMBER(4) primary key,
            code nvarchar2(50),
            description nvarchar2(50),
            is_delete INTEGER NOT NULL
);

-- academic level (tr√¨nh ƒë·ªô h·ª?c v·∫•n)----
Create table academic_level(
            id NUMBER(4) primary key,
            code nvarchar2(50),         -- tr√¨nh ƒë·ªô h·ª?c v·∫•n---
            description nvarchar2(50),
            is_delete INTEGER NOT NULL
);
-- H√¨nh th·ª©c l√†m vi·ªác (full time, part time, freelancer, intern, ... ): l√† 1 trong c√°c gi√° tr·ªã ƒë∆∞·ª£c c·∫•u h√¨nh trong DB
CREATE TABLE working_form(
            id NUMBER NOT NULL,
            code VARCHAR(50) NOT NULL,
            description  VARCHAR(100) NOT NULL,
            is_delete INTEGER NOT NULL,
            PRIMARY KEY(id )
);
-- th√¥ng tin c√° nh√¢n
CREATE TABLE users(
            id NUMBER(4) NOT NULL  PRIMARY KEY,
            name VARCHAR(50) NOT NULL,
            user_name VARCHAR(20) NOT NULL UNIQUE,
            email VARCHAR(50) NOT NULL UNIQUE ,
            password VARCHAR(60) NOT NULL,
            phone_number VARCHAR(20) NOT NULL UNIQUE,
            home_town VARCHAR(100) ,
            gender VARCHAR(100) ,
            birth_day DATE NOT NULL ,
            avatar VARCHAR(100),
            activate INTEGER NOT NULL,
            is_delete INTEGER NOT NULL
);

Create table otp(
            id NUMBER(4) primary key,
            code varchar(20) NOT NULL,
            issue_at DATE NOT NULL,
            user_id  NUMBER(4)  NOT NULL,
            CONSTRAINT fk_user_otp FOREIGN KEY(user_id) REFERENCES users(id)
);
----file (Th√¥ng tin v·ª? kinh nghi·ªám, Th√¥ng tin v·ª? mong mu·ªën)----
Create table profiles(
            user_id  NUMBER(4) PRIMARY KEY,
            skill varchar(50),                     -- Kƒ© nƒÉng (l√† 1 t·∫≠p c√°c kƒ© nƒÉng, v√≠ d·ª•: Java, SQL, Docker, ‚Ä¶.)
            number_years_experience NUMBER(4),     -- s·ªë nƒÉm kinh nghi·ªám
            academic_name_id number(4),            -- academic level (tr√¨nh ƒë·ªô h·ª?c v·∫•n)
            desired_salary varchar(50),            -- m·ª©c l∆∞∆°ng mong mu·ªën
            desired_working_address varchar(50),   -- ƒë·ªãa ch·ªâ l√†m vi·ªác mong mu·ªën
            desired_working_form varchar(50),      -- h√¨nh th·ª©c l√†m vi·ªác mong mu·ªën
            is_delete INTEGER NOT NULL,
            CONSTRAINT fk_user_profile    FOREIGN KEY (user_id)    REFERENCES users (id),
            CONSTRAINT fk_academic_level    FOREIGN KEY (academic_name_id)    REFERENCES academic_level(id)
);

CREATE TABLE roles(
            id NUMBER(4) NOT NULL,
            code VARCHAR(20) NOT NULL UNIQUE,
            description VARCHAR(50) NOT NULL,
            is_delete INTEGER NOT NULL,
            PRIMARY KEY(id)
);

CREATE TABLE permisstion(
            user_id NUMBER(4) NOT NULL,
            role_id NUMBER(4) NOT NULL,
            PRIMARY KEY(user_id, role_id),
            CONSTRAINT fk_user    FOREIGN KEY (user_id)    REFERENCES users (id),
            CONSTRAINT fk_role    FOREIGN KEY (role_id)    REFERENCES roles(id)
);

Create table job_position(
             id NUMBER(4) primary key,
             code nvarchar2(50),
             description nvarchar2(50),
             is_delete INTEGER NOT NULL
);

CREATE TABLE job(
            id NUMBER(4) PRIMARY KEY,
            name VARCHAR(150) NOT NULL,
            job_position_id NUMBER(4) NOT NULL,       -- id v·ªã tr√≠ c√¥ng vi·ªác
            number_experience VARCHAR(100) NOT NULL,  -- s·ªë nƒÉm kinh nghi·ªám
            working_form_id  NUMBER(4) NOT NULL,      -- h√¨nh th·ª©c l√†m vi·ªác
            address_work VARCHAR(100) NOT NULL,
            academic_level_id NUMBER(4) NOT NULL,     -- tr√¨nh ƒë·ªô h·ª?c v·∫•n
            rank_id NUMBER(4) NOT NULL,               -- level id--
            qty_person INTEGER NOT NULL,              -- s·ªë l∆∞·ª£ng ng∆∞·ª?i tuy·ªÉn
            start_recruitment_date DATE NOT NULL,     -- ng√†y b·∫Øt ƒë·∫ßu tuy·ªÉn d·ª•ng
            due_date DATE NOT NULL,                   -- ng√†y k·∫øt th√∫c
            skills VARCHAR(100) NOT NULL,             -- k·ªπ nƒÉng
            description VARCHAR(2000) NOT NULL,
            interest VARCHAR(2000) NOT NULL,          -- quy·ª?n l·ª£i
            job_requirement VARCHAR(2000) NOT NULL,   -- y√™u c·∫ßu c√¥ng vi·ªác
            salary_max INTEGER NOT NULL,              -- m·ª©c l∆∞∆°ng t·ªëi ƒëa
            salary_min INTEGER NOT NULL,              -- m·ª©c l∆∞∆°ng nh·ª? nh·∫•t
            contact_id NUMBER(4) NOT NULL,            -- li√™n h·ªá
            create_id  NUMBER(4) NOT NULL,
            create_date DATE NOT NULL,
            update_id  NUMBER(4) NOT NULL,
            update_date DATE NOT NULL,                -- th·ª?i gian update m·ªõi nh·∫•t
            status_id NUMBER(4) NOT NULL,             -- tr·∫°ng th√°i
            views  INTEGER ,
            is_delete INTEGER NOT NULL,
            CONSTRAINT fk_working_form FOREIGN KEY (working_form_id)  REFERENCES working_form(id),
            CONSTRAINT fk_academic_level_job FOREIGN KEY (academic_level_id)  REFERENCES academic_level (id),
            CONSTRAINT fk_rank FOREIGN KEY (rank_id)  REFERENCES rank (id),
            CONSTRAINT fk_contact FOREIGN KEY (contact_id)  REFERENCES users (id),
            CONSTRAINT fk_update FOREIGN KEY (update_id)  REFERENCES users (id),
            CONSTRAINT fk_create FOREIGN KEY (create_id)  REFERENCES users (id),
            CONSTRAINT fk_status_job FOREIGN KEY (status_id)  REFERENCES status_job(id),
            CONSTRAINT FK_JOB_POSITION FOREIGN KEY (job_position_id) REFERENCES JOB_POSITION(id)
);

--Chi ti·∫øt h·ªì s∆° ·ª©ng tuy·ªÉn
CREATE TABLE jobs_register(
            job_id NUMBER NOT NULL,
            user_id NUMBER NOT NULL,
            date_register DATE NOT NULL ,     -- ƒ?·∫∑t l·ªãch ph·ª?ng v·∫•n
            date_interview DATE,              -- ng√†y ph·ª?ng v·∫•n
            method_interview VARCHAR(50),     -- H√¨nh th·ª©c ph·ª?ng v·∫•n: online, offline
            address_interview VARCHAR(50),
            status_id NUMBER NOT NULL,
            reason VARCHAR(50),               -- L√Ω do (ch·ªâ c√≥ gi√° tr·ªã khi tr·∫°ng th√°i l√† ‚Äú·ª®ng vi√™n b·ªã t·ª´ ch·ªëi‚Ä? ho·∫∑c ‚Äú·ª®ng vi√™n ƒë√£ h·ªßy ·ª©ng tuy·ªÉn‚Ä?)
            cv_file VARCHAR(50) NOT NULL,
            media_type VARCHAR(50)NOT NULL,
            is_delete INTEGER NOT NULL,
            PRIMARY KEY(job_id, user_id ),

            CONSTRAINT fk_job_register  FOREIGN KEY (job_id)   REFERENCES job(id),
            CONSTRAINT fk_user_register   FOREIGN KEY (user_id)    REFERENCES users (id),
            CONSTRAINT fk_reg_status FOREIGN KEY (status_id)  REFERENCES status_job_register(id)
);

Create table type_notifications(
             id NUMBER(4) primary key,
             code nvarchar2(50),
             description nvarchar2(50),
             is_delete INTEGER NOT NULL
             )

Create table job_position(
            id NUMBER(4) primary key,
            code nvarchar2(50),
            description nvarchar2(50),
            is_delete INTEGER NOT NULL
);
-- th√¥ng b√°o
CREATE TABLE notifications(
            id NUMBER NOT NULL,
            sender_id  NUMBER NOT NULL,
            receiver_id  NUMBER NOT NULL,
            create_date DATE NOT NULL,
            content  varchar(200) NOT NULL,
            res_id NUMBER NOT NULL,           -- l√† job_id ho·∫∑c l√† job_reg_id;
            type_id NUMBER NOT NULL,
            is_delete INTEGER NOT NULL,
            PRIMARY KEY(id ) ,
            CONSTRAINT fk_type FOREIGN KEY (type_id)  REFERENCES type_notifications (id),
            CONSTRAINT fk_sender_id  FOREIGN KEY (sender_id)   REFERENCES users (id),
            CONSTRAINT fk_receiver_id   FOREIGN KEY (receiver_id)    REFERENCES users (id)
);
-- th√¥ng tin c√¥ng ty
CREATE TABLE company(
            id NUMBER NOT NULL,
            name  VARCHAR(200) NOT NULL,
            name_acronym VARCHAR(80) NOT NULL,  -- t√™n vi·∫øt t·∫Øt
            email VARCHAR(100) NOT NULL,
            hotline VARCHAR(100) NOT NULL,
            date_incoporation DATE NOT NULL,    -- ng√†y th√†nh l·∫≠p c√¥ng ty
            tax_code VARCHAR(100) NOT NULL,     -- m√£ s·ªë thu·∫ø
            tax_date DATE NOT NULL,             -- Ng√†y c·∫•p m√£ s·ªë thu·∫ø
            tax_place VARCHAR(50) NOT NULL,     -- N∆°i c·∫•p m√£ s·ªë thu·∫ø
            head_office VARCHAR(50) NOT NULL,   -- tr·ª• s·ªü ch√≠nh
            number_staff INTEGER NOT NULL,      -- s·ªë l∆∞·ª£ng nh√¢n vi√™n
            link_web VARCHAR(50) NOT NULL,      -- tr·ª• s·ªü ch√≠nh
            description VARCHAR(2000) NOT NULl, -- m√¥ t·∫£ c√¥ng ty
            avatar VARCHAR(50) NOT NULL,        -- ·∫£nh ƒë·∫°i di·ªán
            backdrop_img VARCHAR(50) NOT NULL,  -- ·∫£nh b√¨a
            is_delete INTEGER NOT NULL,
            PRIMARY KEY(id)
);